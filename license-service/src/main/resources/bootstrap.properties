encrypt.key=h152454aaaaaaa48842247452454545452wsss!!ggssssssssss
spring.profiles.active=dev
spring.cloud.config.uri=http://localhost:8088

feign.hystrix.enabled=true

eureka.instance.preferIpAddress=true
eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka



#The first property, circuitBreaker.requestVolumeTheshold, controls the
#amount of consecutive calls that must occur within a 10-second window before Hystrix
#will consider tripping the circuit breaker for the call. The second property, circuit-
#Breaker.errorThresholdPercentage, is the percentage of calls that must fail
#(due to timeouts, an exception being thrown, or a HTTP 500 being returned) after the
#circuitBreaker.requestVolumeThreshold value has been passed before the circuit
#breaker it tripped. The last property in the previous code example, circuit-
#Breaker.sleepWindowInMilliseconds, is the amount of time Hystrix will sleep
#once the circuit breaker is tripped before Hystrix will allow another call through to
#see if the service is healthy again.
#The last two Hystrix properties (metrics.rollingStats.timeInMilliseconds
#and metrics.rollingStats.numBuckets) are named a bit differently than
#the previous properties, but they still control the behavior of the circuit breaker. The
#first property, metrics.rollingStats.timeInMilliseconds, is used to control
#the size of the window that will be used by Hystrix to monitor for problems with a service
#call. The default value for this is 10,000 milliseconds (that is, 10 seconds).
#The second property, metrics.rollingStats.numBuckets, controls the number
#of times statistics are collected in the window you’ve defined. Hystrix collects metrics
#in buckets during this window and checks the stats in those buckets to determine
#if the remote resource call is failing. The number of buckets defined must evenly
#divide into the overall number of milliseconds set for rollingStatus.inMilliseconds
#stats. For example, in your custom settings in the previous listing, Hystrix
#will use a 15-second


#circuit breaker configuration
hystrix.command.default.circuitBreaker.requestVolumeThreshold=20
hystrix.command.default.circuitBreaker.errorThresholdPercentage=75
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=7000
hystrix.command.default.metrics.rollingStats.timeInMilliseconds=15000
hystrix.command.default.metrics.rollingStats.numBuckets=5